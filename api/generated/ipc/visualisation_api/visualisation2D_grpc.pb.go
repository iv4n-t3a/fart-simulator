// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: ipc/visualisation/visualisation2D.proto

package visualisation_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Particle2DObserver_ObserveParticle_FullMethodName = "/ipc.visualisation.Particle2DObserver/ObserveParticle"
	Particle2DObserver_Collision_FullMethodName       = "/ipc.visualisation.Particle2DObserver/Collision"
)

// Particle2DObserverClient is the client API for Particle2DObserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Particle2DObserverClient interface {
	ObserveParticle(ctx context.Context, in *Particle2D, opts ...grpc.CallOption) (*Empty, error)
	Collision(ctx context.Context, in *ParticleIndex, opts ...grpc.CallOption) (*Empty, error)
}

type particle2DObserverClient struct {
	cc grpc.ClientConnInterface
}

func NewParticle2DObserverClient(cc grpc.ClientConnInterface) Particle2DObserverClient {
	return &particle2DObserverClient{cc}
}

func (c *particle2DObserverClient) ObserveParticle(ctx context.Context, in *Particle2D, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Particle2DObserver_ObserveParticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *particle2DObserverClient) Collision(ctx context.Context, in *ParticleIndex, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Particle2DObserver_Collision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Particle2DObserverServer is the server API for Particle2DObserver service.
// All implementations must embed UnimplementedParticle2DObserverServer
// for forward compatibility.
type Particle2DObserverServer interface {
	ObserveParticle(context.Context, *Particle2D) (*Empty, error)
	Collision(context.Context, *ParticleIndex) (*Empty, error)
	mustEmbedUnimplementedParticle2DObserverServer()
}

// UnimplementedParticle2DObserverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParticle2DObserverServer struct{}

func (UnimplementedParticle2DObserverServer) ObserveParticle(context.Context, *Particle2D) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserveParticle not implemented")
}
func (UnimplementedParticle2DObserverServer) Collision(context.Context, *ParticleIndex) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collision not implemented")
}
func (UnimplementedParticle2DObserverServer) mustEmbedUnimplementedParticle2DObserverServer() {}
func (UnimplementedParticle2DObserverServer) testEmbeddedByValue()                            {}

// UnsafeParticle2DObserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Particle2DObserverServer will
// result in compilation errors.
type UnsafeParticle2DObserverServer interface {
	mustEmbedUnimplementedParticle2DObserverServer()
}

func RegisterParticle2DObserverServer(s grpc.ServiceRegistrar, srv Particle2DObserverServer) {
	// If the following call pancis, it indicates UnimplementedParticle2DObserverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Particle2DObserver_ServiceDesc, srv)
}

func _Particle2DObserver_ObserveParticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Particle2D)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Particle2DObserverServer).ObserveParticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Particle2DObserver_ObserveParticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Particle2DObserverServer).ObserveParticle(ctx, req.(*Particle2D))
	}
	return interceptor(ctx, in, info, handler)
}

func _Particle2DObserver_Collision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticleIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Particle2DObserverServer).Collision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Particle2DObserver_Collision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Particle2DObserverServer).Collision(ctx, req.(*ParticleIndex))
	}
	return interceptor(ctx, in, info, handler)
}

// Particle2DObserver_ServiceDesc is the grpc.ServiceDesc for Particle2DObserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Particle2DObserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.visualisation.Particle2DObserver",
	HandlerType: (*Particle2DObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObserveParticle",
			Handler:    _Particle2DObserver_ObserveParticle_Handler,
		},
		{
			MethodName: "Collision",
			Handler:    _Particle2DObserver_Collision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc/visualisation/visualisation2D.proto",
}
